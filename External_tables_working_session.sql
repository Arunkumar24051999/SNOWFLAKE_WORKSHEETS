--External Tables 
//================
USE DATABASE MYDB;

// Create a schema for Stage objects
--CREATE SCHEMA IF NOT EXISTS EXT_STAGES;

// Create a schema for File format objects
--CREATE SCHEMA IF NOT EXISTS FILE_FORMATS;

// Create a schema for External Tables
CREATE SCHEMA IF NOT EXISTS EXT_TABLES;

----------------------------

// Create file format object
CREATE OR REPLACE FILE FORMAT MYDB.FILE_FORMATS.CSV_FILEFORMAT
    type = csv
    field_delimiter = ','
    skip_header = 1
    empty_field_as_null = TRUE
    FIELD_OPTIONALLY_ENCLOSED_BY = '"'
    ;
 
// Create stage object with integration object & file format object
// Using the Storeage Integration object that was already created

CREATE OR REPLACE STAGE MYDB.EXTERNAL_STAGES.MYS3_STAGE
    URL = 's3://awss3arun/ext_csv'
    STORAGE_INTEGRATION = s3_int1
    FILE_FORMAT = MYDB.FILE_FORMATS.CSV_FILEFORMAT ; 

    //CREATE A STORAGE INTEGRATION WITH AWS 
/*CREATE OR REPLACE STORAGE INTEGRATION s3_int1
STORAGE_PROVIDER= S3
TYPE= EXTERNAL_STAGE
ENABLED= true
STORAGE_AWS_ROLE_ARN=  'arn:aws:iam::597088015338:role/aws_s3_snowflake_integration'
STORAGE_ALLOWED_LOCATIONS=('s3://awss3arun/pipes/csv/') 
COMMENT= 'INTEGRATION WITH AWS S3 BUCKETS';*/
    
ALTER STORAGE INTEGRATION S3_INT1
SET STORAGE_ALLOWED_LOCATIONS= ('s3://awss3arun/ext_csv');

 
//Listing files under my s3 bucket
LIST @MYDB.EXTERNAL_STAGES.MYS3_STAGE;

--------------------------

//Create External Tables

CREATE OR REPLACE EXTERNAL TABLE EXT_TABLES.ET_S3_CUSTOMER(
first_name STRING AS(VALUE:C1 :: STRING)
,last_name STRING  AS(VALUE:C2 :: STRING)
,email STRING AS(VALUE:C3 :: STRING)
,phone STRING AS(VALUE:C4 :: STRING)
,address STRING AS(VALUE:C5 :: STRING)
,age STRING AS(VALUE:C6 :: STRING)
,registered DATE AS TO_DATE(VALUE:C7 :: VARCHAR,'YYYY-MM-DD')
,orders STRING AS(VALUE:C8 :: STRING)
,job STRING AS(VALUE:C9 :: STRING)
,hobbies STRING AS(VALUE:C10 :: STRING)
,is_married	STRING AS(VALUE:C11 :: STRING)

)
WITH 
LOCATION = @MYDB.EXTERNAL_STAGES.MYS3_STAGE
FILE_FORMAT = MYDB.FILE_FORMATS.CSV_FILEFORMAT
;
SELECT * FROM EXT_TABLES.ET_S3_CUSTOMER;
SELECT * FROM MYDB.PUBLIC.ORDERS;


CREATE OR REPLACE EXTERNAL TABLE EXT_TABLES.ET_S3_ORDERS(
first_name STRING AS(VALUE:C1 :: STRING)
,last_name STRING  AS(VALUE:C2 :: STRING)
)
WITH 
LOCATION = @MYDB.EXTERNAL_STAGES.MYS3_STAGE
PATTERN = '.*orders.*'
FILE_FORMAT = MYDB.FILE_FORMATS.CSV_FILEFORMAT
;

SELECT * FROM EXT_TABLES.ET_S3_ORDERS;

// To see external tables
DESC EXTERNAL TABLE EXT_TABLES.ET_S3_CUSTOMER TYPE = 'column';
DESC EXTERNAL TABLE EXT_TABLES.ET_S3_CUSTOMER TYPE = 'stage';

// To see the files it is referring
SELECT DISTINCT METADATA$FILENAME FROM EXT_TABLES.ET_S3_CUSTOMER;

----------------------------

// Analyze the data

// Requirement: Get the list of customer who placed more than 10 orders
SELECT C.CUST_ID, C.CUSTNAME, SUM(O.NUM_ORDERS)
FROM EXT_TABLES.ET_S3_CUSTOMER C
INNER JOIN EXT_TABLES.ET_S3_ORDERS O
ON C.CUST_ID=O.CUST_ID
GROUP BY C.CUST_ID, C.CUSTNAME HAVING SUM(O.NUM_ORDERS) LESSTHAN 10;


// Requirement: Get the list of customer who did not placed any order
SELECT C.CUST_ID, C.CUSTNAME, SUM(O.NUM_ORDERS)
FROM EXT_TABLES.ET_S3_CUSTOMER C
INNER JOIN EXT_TABLES.ET_S3_ORDERS O
ON C.CUST_ID=O.CUST_ID
GROUP BY C.CUST_ID, C.CUSTNAME HAVING SUM(O.NUM_ORDERS) = 0;

-------------------------

// Views on External tables

// Create a schema for views
CREATE SCHEMA IF NOT EXISTS MYVIEWS;

// Create a secure view
CREATE OR REPLACE SECURE VIEW MYVIEWS.SECVW_ET_CUST
AS
SELECT C.CUST_ID, SUM(O.NUM_ORDERS) TOT_ORDERS
FROM EXT_TABLES.ET_S3_CUSTOMER C
INNER JOIN EXT_TABLES.ET_S3_ORDERS O
ON C.CUST_ID=O.CUST_ID
GROUP BY C.CUST_ID HAVING SUM(O.NUM_ORDERS) LESSTHAN 10;

// Query the secure view
SELECT * FROM MYVIEWS.SECVW_ET_CUST;


// Create materialized view
CREATE OR REPLACE SECURE VIEW MYVIEWS.MATVW_ET_CUST
AS
SELECT * FROM EXT_TABLES.ET_S3_CUSTOMER WHERE STATE='Victoria';

// Query the secure view
SELECT * FROM MYVIEWS.MATVW_ET_CUST;